/*
 * Main game logic for pic processor
 * Event based.
 *
 * Copyright Julius Celik 2016
 * Copyright Hannes Rabo 2016
 */

#include "game.h"

/////////////////////////////////////
char number_of_players = 2;
char correct_answer;

volatile char pi_answered = 0;
int player_score[4];
int number_of_questions;
int questions_asked_counter = 0;

int game_init(void)
{
	
	//Send number of players
 	spi_request_initiation(number_of_players);

	int i;	
	for(i = 0; i < number_of_players; i++)
	{
		points[i] = 0;
	}

	// TODO communicate
	
	for(i = 0; i < 10000000; i++)
		;
	query_number_of_questions();

	for(i = 0; i < number_of_questions; i++)
	{
		questions_asked[i] = 0;
	}

	// TODO communicate 				
	// Get next answer from pi
	query_next_answer();
	
	return 0;
	
}

// Called by the pi
int update_number_of_questions(char number)
{
	number_of_questions = number;
	pi_answered = 1;
	
	return 0;
}

char get_number_of_questions(void)
{
	
	return number_of_questions;
}

// Ask pi to update number of questions on pic. The pi will call update_number_of_questions
int query_number_of_questions(void)
{
	
	// Wait for pi
	pi_answered = 0;
	
	// TODO comunicate with pi
	spi_request_number_of_questions();

	// Wait for pi to answer
	while(!pi_answered);

	return 0;
}

// Called by the pi
int update_answer(char answer)
{
	correct_answer = answer;
	pi_answered = 1;
	
	return 0;
}

// Ask pi for the correct answer to next question. The pi will call update_answer
int query_next_answer(void)
{
	
	// Wait for pi
	pi_answered = 0;
	

	int i = 0;
	char question_id;
	
	i = get_random_int(number_of_questions);
	while(questions_asked[i])
	{
		i = get_random_int(number_of_questions);
	}
	
	question_id = i;
	questions_asked[i] = 1;


	// send question_id
	spi_request_next_answer(question_id);

	// Wait for pi to answer
	while(!pi_answered);
	
	questions_asked_counter++;

	return 0;
}

int send_answer(char player_id, char correct, char button_id)
{
	// TODO write here
	// Send player who answered
	// Send if the player answered correct
	// Send updated scores
	
	spi_send_player_answer(player_id, correct, button_id);
	
	return 0;
}

// Can expand to more complicated algorithms
int update_score(char player_id)
{
	spi_send_score(player_score[0], player_score[1], player_score[2], player_score[3]);
	return 0;
}

int game_end()
{
	spi_request_finish();
	return 0;
}

// Called when button is pressed
int game_answer(char player_id, char button_id)
{
	// 0 is question was wrongly answered, 1 if question was correctly answered
	char correct = 0;
	
	// Check for correct answer
	if(button_id == correct_answer)
	{
		correct = 1;
		player_score[(int)player_id]++;
	}
	else
	{
		correct = 0;
	}

	send_answer(player_id, correct, button_id);	// Send answer to pi	
	
	update_score(player_id);

	// if true, game ends
	if(questions_asked_counter == 10)
	{
		game_end();
	}
	else
	{
		query_next_answer();				// Get next answer from pi
	}
	return 0;
}
